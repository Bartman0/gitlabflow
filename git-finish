#!/bin/bash
set -e
shopt -s expand_aliases

masterBranch="master"

alias trace_on='set -x'
alias trace_off='{ set +x; } 2>/dev/null'

if [[ "$1" = "--help" ]] ; then
    echo "Finishing up feature, defect and hotfix branches: ";
    echo "  - git finish";
    echo ""
    echo "This command will merge master into feature branches and defect branches to catch up."
    echo "Next, the feature/defect/hotfix branches will be pushed to start pull requests and local branches will be cleaned."
    exit 1;
fi

tags=$(git rev-list --tags --max-count=1)
if [[ "$1" =~ ^(major|minor|patch)$ ]]; then
    if [ "$tags" == "" ]; then
        echo "No tags to be found, can't automatically generate the next release number"
        exit 1;
    fi
fi

if ! [ -d .git ] ; then
    if ! [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ] ; then
        echo "Current directory is not a git folder."
        exit 1;
    fi
fi

branch=$(git rev-parse --abbrev-ref HEAD)
shortBranch=$(echo $branch | cut -d'/' -f 2)

parse () {
    version=$(git tag -l "[0-9]*.[0-9]*.[0-9]*" | sort --version-sort --field-separator=. | tail -n1)

    if [ -z "$version" ]
    then
        version="0.0.0"
    fi

    patchpart="${version##*.}"
    majorpart="${version%.*}"
    minorpart="${majorpart#*.}"
    majorpart="${majorpart%.*}"
}

release_number () {
    case "$1" in
        major) version="$((majorpart+1)).0.0" ;;
        minor) version="$majorpart.$((minorpart+1)).0" ;;
        patch) version="$majorpart.$minorpart.$((patchpart+1))" ;;
    esac
}

uriencode () {
    jq -nr --arg v "$1" '$v|@uri'
}

cleanup_localbranch () {
    echo "Cleaning up local branch"
    git branch -D $1
}

cleanup_remotebranch () {
    if [[ $(git branch -a | egrep "remotes/origin/$1" | wc -l | tr -d ' ') = "1" ]]; then
        echo "Cleaning up remote branch"
        git push origin --delete $1
    fi
}

create_pullrequest () {
    echo "Pushing branch to origin to start CI process"
    git push origin $1
    originUrl=$(git config --get remote.origin.url)
    originUrl=$(echo "$originUrl" | sed 's/ssh:\/\/git@\(.*\):[0-9][0-9]*\/\(.*\).git/https:\/\/\1\/\2.git/')

    targetBranch=$masterBranch
    if [[ $branch =~ ^(feature|defect)/.* ]]; then
        if [[ "$2" =~ ^(major|minor|patch)$ ]]; then
            parse
            release=release/$(release_number "$2")
        else
            if [[ "$2" =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
                release=release/"$2"
            else
                echo "No valid release argument given, I don't know which release to target"
                exit 1
            fi
        fi
        targetBranch="$release"
        targetShortBranch=$(echo $targetBranch | cut -d'/' -f 2)
        if [[ $(git branch --list | egrep -e "$targetBranch" | wc -l | tr -d ' ') = "0" ]]; then
            echo "Can't find the specified release, please create it first:"
            echo "  - git-release $targetShortBranch"
            exit 1
        fi
    fi

    vsoRegex=".visualstudio.com"
    if [[ "$originUrl" =~ $vsoRegex ]]; then
        originUrl="$originUrl/pullrequestcreate?targetRef=master&sourceRef=$1"
    fi    

    # https://pnl.gitlab.schubergphilis.com/LED/poc/gitlabflow-test/-/merge_requests/new?utf8=âœ“&merge_request%5Bsource_project_id%5D=2443&merge_request%5Bsource_branch%5D=hotfix%2F6.6.9&merge_request%5Btarget_project_id%5D=2443&merge_request%5Btarget_branch%5D=master
    gitlabRegex="\.gitlab\."
    if [[ "$originUrl" =~ $gitlabRegex ]]; then
        originUrl=${originUrl%.git}      
        uri_source1="merge_request[source_branch]"
        uri_source2="$branch"
        uri_source1=$(uriencode "$uri_source1")
        uri_source2=$(uriencode "$uri_source2")
        uri_source="$uri_source1=$uri_source2"
        uri_target1="merge_request[target_branch]"
        uri_target2="$targetBranch"
        uri_target1=$(uriencode "$uri_target1")
        uri_target2=$(uriencode "$uri_target2")
        uri_target="$uri_target1=$uri_target2"
        originUrl="$originUrl/-/merge_requests/new?$uri_source&$uri_target"
    fi

    case $( uname -s ) in
        Darwin)  open='open';;
        MINGW*)  open='start';;
        MSYS*)   open='start';;
        CYGWIN*) open='cygstart';;
        *)       open='xdg-open';;
    esac

    # change for microsoft systems, probably WSL
    if [[ "$(uname -a)" =~ /[Mm]icrosoft/ ]]; then
        open='wslview'
    fi

    # Allow printing the url if BROWSER=echo
    if [[ $BROWSER != "echo" ]]; then
        exec &>/dev/null
    fi

    # open it in a browser
    ${BROWSER:-$open} "$originUrl"

    cleanup_localbranch $1
}

merge_to_master () {
    echo "Merging to $1 from $2"
    git merge --no-ff $2
    git push --follow-tags origin $1
}

if [[ $branch =~ ^(feature|defect|hotfix)/.* ]]; then
    echo "Fetching latest information"
    git fetch --progress --all --prune
    echo "Pulling latest $masterBranch from origin"
    git pull origin $masterBranch
    echo "Merging $masterBranch to catch up and resolve conflicts"
    git merge $masterBranch
    # do not push the branch here, create a pull request further down the line
    #echo "Pushing branch to origin to start CI process"
    #git push origin $branch
elif [[ $branch =~ ^(release)/.* ]]; then
    # do not push the branch here, create a pull request further down the line
    #echo "Pushing branch to origin to start CI process"
    #git push origin $branch
    :
else 
    echo "Currently not on a feature/defect/release/hotfix branch";
    exit 1;
fi

if [[ $branch =~ ^(release|feature|defect|hotfix)/.* ]]; then    
    create_pullrequest $branch "$1" && cleanup_localbranch $branch
#else
#    echo "Releases are not merged to master in any way"
fi

