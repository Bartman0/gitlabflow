#!/bin/sh
set -e
masterBranch="master"

if [[ "$1" = "--h" ]] ; then
   echo "Finishing up feature, defect and hotfix branches: ";
   echo "  - git finish";
   echo ""
   echo "Finishing up release branches: ";
   echo "  - git finish <annotation>";
   echo "    where annotation is optional";
   echo ""
   echo "This command will rebase feature branches, tag release and hotfix branches"
   echo "and merge them back into $masterBranch."
   echo "Afterwards, the feature/release/hotfix branch will be cleaned up"
   exit 1;
fi

if ! [ -d .git ] ; then
    if ! [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ] ; then
        echo "Current directory is not a git folder."
        exit 1;
    fi
fi

branch=$(git rev-parse --abbrev-ref HEAD)
shortBranch=$(echo $branch | cut -d'/' -f 2)

cleanup_localbranch () {
echo "Do you wish to delete the local branch $1?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) echo "Cleaning up local branch"; git branch -D $1; break;;
        No ) break;;
    esac
done
}

cleanup_remotebranch () {
if [[ "$(git branch -a | egrep "remotes/origin/$1" | wc -l)" = "1" ]]; then
    echo "Do you wish to delete the remote branch remotes/origin/$1?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) echo "Cleaning up remote branch"; git push origin --delete $1; break;;
            No ) break;;
        esac
    done    
fi
}

create_pullrequest () {
git push origin $1
originUrl=$(git config --get remote.origin.url)

vsoRegex=".visualstudio.com"
if [[ "$originUrl" =~ $vsoRegex ]] ; then
   originUrl="$originUrl/pullrequestcreate?targetRef=master&sourceRef=$1"
fi    

case $( uname -s ) in
  Darwin)  open='open';;
  MINGW*)  open='start';;
  MSYS*)   open='start';;
  CYGWIN*) open='cygstart';;
  *)       open='xdg-open';;
esac

# Allow printing the url if BROWSER=echo
if [[ $BROWSER != "echo" ]]; then
  exec &>/dev/null
fi

# open it in a browser
${BROWSER:-$open} "$originUrl"

cleanup_localbranch $1
}

merge_to_master () {
    echo "Merging to $1 from $2"
    git merge --no-ff $2
    git push --follow-tags origin $1
}

if [[ $branch =~ ^(feature|defect)/.* ]]; then
    echo "Pulling latest $masterBranch from origin"
    git pull origin $masterBranch:$masterBranch
    echo "Rebasing branch using $masterBranch"
    git rebase -i $masterBranch        
elif [[ $branch =~ ^(hotfix)/.* ]]; then
    : 	# just here to make hotfix processing explicit
elif [[ $branch =~ ^(release)/.* ]]; then
    echo "Tagging release branch"
    if [ "$1" = "" ]; then
        git tag $shortBranch
    else
        git tag -a $shortBranch -m "$1"
    fi    
else 
    echo "Currently not on a feature/defect/release/hotfix branch";
    exit 1;
fi

git checkout $masterBranch

if [[ $branch =~ ^(feature|defect|hotfix)/.* ]]; then    
    echo "Do you wish to: "
    select opt in "Merge to $masterBranch" "Create a pull request"; do
        case $opt in
            "Merge to $masterBranch" ) merge_to_master $masterBranch $branch && cleanup_localbranch $branch && cleanup_remotebranch $branch; break;;
            "Create a pull request" ) create_pullrequest $branch && cleanup_localbranch $branch; break;;
        esac
    done
else
    echo "Releases are not merged to master in any way"
fi

